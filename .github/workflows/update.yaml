name: Update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *"
  workflow_call:
    outputs:
      sha:
        description: "SHA after versions files have been updated"
        value: ${{ jobs.update.update-versions.outputs.sha }}

jobs:
  update:
    name: Fetch updates
    runs-on: ubuntu-22.04
    outputs:
      sha: ${{ steps.update-versions.outputs.sha }}
      push: ${{ steps.update-versions.outputs.push }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Fetch new base versions
        id: fetch-base
        shell: bash
        run: |
          find ./base -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | while read -r app; do
            if [[ -f "./base/$app/latest-version.sh" ]]; then
              version=$(bash "./base/$app/latest-version.sh")
              if [[ -n "$version" || "$version" != null ]]; then
                echo "$version" | tee "./base/$app/VERSION" > /dev/null
                echo "$app $version"
              fi
            fi
          done

      - name: Fetch new app versions
        id: fetch-apps
        shell: bash
        run: |
          find ./apps -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | while read -r app; do
            if [[ -f "./apps/$app/latest-version.sh" ]]; then
              version=$(export TOKEN=${{ steps.generate-token.outputs.token }} && bash "./apps/$app/latest-version.sh")
              if [[ -n "$version" || "$version" != null ]]; then
                echo "$version" | tee "./apps/$app/VERSION" > /dev/null
                echo "$app $version"
              fi
            fi
          done

      - name: Update versions file
        id: update-versions
        shell: bash
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config user.name ${{ github.actor }}
            git config user.email ${{ github.actor }}@users.noreply.github.com
            git add -A
            git commit -sam 'chore: add new release versions' || exit 0
            git push
            sha=$(git log -1 --format='%H')
            echo "::set-output name=sha::$sha"
          fi
