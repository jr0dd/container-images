name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'base/**'
  pull_request:
    paths:
      - 'apps/**'
      - 'base/**'

jobs:
  get-changes:
    name: Get changes
    runs-on: ubuntu-22.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            changed:
              - 'apps/**'
              - 'base/**'

      - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
      - id: reduce
        run: |
          CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
          echo ::set-output name=containers::${CONTAINERS}

  hadolint:
    name: Run hadolint
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: hadolint
        uses: reviewdog/action-hadolint@v1.33.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          filter_mode: diff_context
          fail_on_error: true

  build-and-test:
    name: Build and test
    runs-on: ubuntu-22.04
    needs:
      - get-changes
      - hadolint
    strategy:
      matrix: ${{ fromJson(needs.get-changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup workflow Variables
        id: vars
        shell: bash
        run: |
          BUILD_DATE=$(date --rfc-3339=seconds --utc)
          echo ::set-output name=build_date::${BUILD_DATE}
          if test -f "./apps/${{ matrix.container }}/Dockerfile"; then
            CATEGORY="apps"
          else
            CATEGORY="base"
          fi
          echo ::set-output name=category::${CATEGORY}
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
          echo ::set-output name=version::${VERSION}
          PLATFORM=$(cat ./${CATEGORY}/${{ matrix.container }}/PLATFORM)
          echo ::set-output name=platform::${PLATFORM}
          if test -f "./${CATEGORY}/${{ matrix.container }}/goss.yaml"; then
            echo ::set-output name=goss::true
          else
            echo ::set-output name=goss::false
          fi
          if [ "${{github.event_name}}" == "pull_request" ]; then
            echo ::set-output name=push::false
            echo ::set-output name=cache_from::"type=local,src=/tmp/.buildx-cache"
            echo ::set-output name=cache_to::""
          else
            echo ::set-output name=push::true
            echo ::set-output name=cache_from::"type=local,src=/tmp/.buildx-cache"
            echo ::set-output name=cache_to::"type=local,dest=/tmp/.buildx-cache,mode=max"
          fi

      - name: Set up Goss
        uses: e1himself/goss-installation-action@v1.0.4
        if: ${{ steps.vars.outputs.goss == 'true' }}
        with:
          # renovate: datasource=github-releases depName=aelsabbahy/goss
          version: v0.3.18

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Load Local Test Container
        if: ${{ steps.vars.outputs.goss == 'true' }}
        uses: docker/build-push-action@v3
        with:
          build-args: VERSION=${{ steps.vars.outputs.version }}
          labels: |
            org.opencontainers.image.created=${{ steps.vars.outputs.build_date }}
          context: .
          file: ./${{ steps.vars.outputs.category }}/${{ matrix.container }}/Dockerfile
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
          cache-from: ${{ steps.vars.outputs.cache_from }}
          cache-to: ${{ steps.vars.outputs.cache_to }}
          secrets: |
            "github_token=${{ secrets.PAT }}"

      - name: Run GOSS tests
        id: goss
        if: ${{ steps.vars.outputs.goss == 'true' }}
        shell: bash
        env:
          NODE_ENV: staging
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
          GOSS_FILE: ./${{ steps.vars.outputs.category }}/${{ matrix.container }}/goss.yaml
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: |
          if [[ ${{ matrix.container }} == wyoa-bot ]]; then
            dgoss run -e SOPS_AGE_KEY=${{ secrets.SOPS_AGE_KEY }} -e NODE_ENV=staging \
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
          else
            dgoss run ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
          fi

      - name: Build and Push
        id: release
        uses: docker/build-push-action@v3
        with:
          build-args: VERSION=${{ steps.vars.outputs.version }}
          labels: |
            org.opencontainers.image.created=${{ steps.vars.outputs.build_date }}
          context: .
          platforms: ${{ steps.vars.outputs.platform }}
          file: ./${{ steps.vars.outputs.category }}/${{ matrix.container }}/Dockerfile
          push: ${{ steps.vars.outputs.push }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:rolling
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.vars.outputs.version }}
          cache-from: ${{ steps.vars.outputs.cache_from }}
          cache-to: ${{ steps.vars.outputs.cache_to }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
