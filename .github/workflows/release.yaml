name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'base/**'
  pull_request:
    paths:
      - 'apps/**'
      - 'base/**'

env:
  # renovate: datasource=github-releases depName=aelsabbahy/goss
  GOSS_VERSION: 0.3.18

jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-22.04
    outputs:
      image: ${{ steps.parse.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ needs.update.outputs.sha }}
          ref: main
          list-files: json
          filters: |
            addedOrModified:
              - added|modified:
                  - 'apps/**'
                  - 'base/**'

      - id: parse
        shell: bash
        run: |
          if [[ ${{ steps.filter.outputs.addedOrModified }} == 'true' ]]; then
            paths='${{ steps.filter.outputs.addedOrModified_files }}'
            echo "image=$(echo $paths | jq --raw-output -c 'map(. |= split("/")[1]) | unique')" >> $GITHUB_OUTPUT
          else
            echo "image=[]" >> $GITHUB_OUTPUT
          fi

  lint:
    name: Run hadolint
    runs-on: ubuntu-22.04
    needs: changes
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: hadolint
        uses: reviewdog/action-hadolint@v1
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          reporter: github-pr-review
          filter_mode: diff_context
          fail_on_error: true

  build:
    name: Build and test
    if: needs.changes.outputs.image != '[]'
    runs-on: ubuntu-22.04
    needs:
      - changes
      - lint
    strategy:
      matrix:
        image: ${{ fromJson(needs.changes.outputs.image) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Setup workflow variables
        id: vars
        run: |
          echo "build_date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT
          if [[ -f "./apps/${{ matrix.image }}/Dockerfile" ]]; then
            echo "category=apps"
          else
            echo "category=base"
          fi
          echo "version=$(cat ./$category/${{ matrix.image }}/VERSION)" >> $GITHUB_OUTPUT
          echo "platform=$(cat ./$category/${{ matrix.image }}/PLATFORM)" >> $GITHUB_OUTPUT
          if [[ -f "./$category/${{ matrix.image }}/goss.yaml" ]]; then
            echo "goss_version=v${{ env.GOSS_VERSION }}" >> $GITHUB_OUTPUT
            echo "goss_enabled=true" >> $GITHUB_OUTPUT
            echo "goss_config=./$category/${{ matrix.image }}/goss.yaml" >> $GITHUB_OUTPUT
          else
            echo "goss_enabled=false" >> $GITHUB_OUTPUT
          fi
          if [[ ${{ github.event_name }} == pull_request ]]; then
            echo "push=false" >> $GITHUB_OUTPUT
          else
            echo "push=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Set up Goss
        uses: e1himself/goss-installation-action@v1.1.0
        if: steps.vars.outputs.goss_enabled == 'true'
        with:
          version: ${{ steps.vars.outputs.goss_version }}

      - name: Build container image for testing
        if: steps.vars.outputs.goss_enabled == 'true'
        uses: docker/build-push-action@v4
        with:
          build-args: |
            VERSION=${{ steps.vars.outputs.version }}
          context: .
          file: ${{ steps.vars.outputs.category }}/${{ matrix.image }}/Dockerfile
          platforms: linux/amd64
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            github_token=${{ steps.generate-token.outputs.token }}

      - name: Run GOSS tests
        id: goss
        if: steps.vars.outputs.goss_enabled == 'true'
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.goss_config }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: |
            dgoss run ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:test

      - name: Build and push
        id: release
        uses: docker/build-push-action@v4
        with:
          build-args: |
            VERSION=${{ steps.vars.outputs.version }}
          labels: |
            org.opencontainers.image.created=${{ steps.vars.outputs.build_date }}
            org.opencontainers.image.revision=${{ github.sha }}
          context: .
          platforms: ${{ steps.vars.outputs.platform }}
          file: ${{ steps.vars.outputs.category }}/${{ matrix.image }}/Dockerfile
          push: ${{ steps.vars.outputs.push }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:rolling
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:v${{ steps.vars.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            github_token=${{ steps.generate-token.outputs.token }}
